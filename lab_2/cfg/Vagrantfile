# -*- mode: ruby -*-
# vi: set ft=ruby :

MACHINES = {
  :vmlab2 => {
        :box_name => "centos/7",
        :ip_addr => '172.16.0.10',
	:disks => {
		:sata2 => {
			:dfile => '../sata2.vdi',
			:size => 100,
			:port => 2
		},
		:sata3 => {
            :dfile => '../sata3.vdi',
            :size => 100,
			:port => 3
		},
        :sata4 => {
            :dfile => '../sata4.vdi',
            :size => 100,
            :port => 4
        },
        :sata5 => {
            :dfile => '../sata5.vdi',
            :size => 100,
            :port => 5
        }
	}
  }
}

Vagrant.configure("2") do |cfg|

  MACHINES.each do |boxn, boxcfg|
      
      cfg.vm.define boxn do |box|
          
          box.vm.box = boxcfg[:box_name]
          box.vm.host_name = boxn.to_s
          box.vm.network "private_network", ip: boxcfg[:ip_addr]
                       
          box.vm.provider :virtualbox do |vb|
              vb.customize ["modifyvm", :id, "--memory", "1024"]
              needsController = false
              boxcfg[:disks].each do |dname, dconf|
                  unless File.exist?(dconf[:dfile])
                      vb.customize ['createhd', '--filename', dconf[:dfile], '--variant', 'Fixed', '--size', dconf[:size]]
                      needsController =  true
                  end
              end
              
              if needsController == true 
                  vb.customize ["storagectl", :id, "--name", "SATA", "--add", "sata" ]
                  boxcfg[:disks].each do |dname, dconf|
                      vb.customize ['storageattach', :id,  '--storagectl', 'SATA', '--port', dconf[:port], '--device', 0, '--type', 'hdd', '--medium', dconf[:dfile]]
                  end
              end
          end
          
          box.vm.provision "shell", inline: <<-SHELL
          mkdir -p ~root/.ssh
          cp ~vagrant/.ssh/auth* ~root/.ssh
          SHELL
          
          box.vm.provision :shell, path: "scripts/1_raid_init.sh"
          box.vm.provision :shell, path: "scripts/2_mount_on_start.sh", run: "always"
      end
  end
end
